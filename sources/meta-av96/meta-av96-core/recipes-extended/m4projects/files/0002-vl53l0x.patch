diff -Naurw ./VL53L0X.cpp ../vl53l0x/VL53L0X.cpp
--- ./VL53L0X.cpp	2020-07-30 14:24:10.708609729 +0200
+++ ../vl53l0x/VL53L0X.cpp	2020-07-30 14:24:41.031039276 +0200
@@ -9,6 +9,7 @@
 #include <string>
 #include <unistd.h>
 #include <stdexcept>
+#include "stm32mp1xx_hal.h"
 
 /*** Defines ***/
 
@@ -31,18 +32,14 @@
 /*** Helper functions ***/
 
 uint64_t milliseconds() {
-	timespec ts;
-	clock_gettime(CLOCK_MONOTONIC, &ts);
-	return (ts.tv_sec * 1000 + ts.tv_nsec / 1000000);
+	return HAL_GetTick() * 1000;
 }
 
 /*** Constructors ***/
 
-VL53L0X::VL53L0X(const int16_t xshutGPIOPin, bool ioMode2v8, const uint8_t address) {
-	this->xshutGPIOPin = xshutGPIOPin;
+VL53L0X::VL53L0X(bool ioMode2v8, const uint8_t address) {
 	this->ioMode2v8 = ioMode2v8;
 	this->address = address;
-	this->gpioInitialized = false;
 
 	this->ioTimeout = 0;
 	this->didTimeout = false;
@@ -55,45 +52,14 @@
 /*** Public Methods ***/
 
 void VL53L0X::initialize() {
-	this->initGPIO();
 	this->initHardware();
+	this->initialized = true;
 }
 
 void VL53L0X::powerOn() {
-	this->initGPIO();
-
-	if (this->xshutGPIOPin >= 0) {
-		std::lock_guard<std::mutex> guard(this->fileAccessMutex);
-		std::ofstream file;
-
-		file.open(this->gpioFilename.c_str(), std::ofstream::out);
-		if (!file.is_open() || !file.good()) {
-			file.close();
-			throw(std::runtime_error(std::string("Failed opening file: ") + this->gpioFilename));
-		}
-		file << "1";
-		file.close();
-
-		// t_boot is 1.2ms max, wait 2ms just to be sure
-		usleep(2000);
-	}
 }
 
 void VL53L0X::powerOff() {
-	this->initGPIO();
-
-	if (this->xshutGPIOPin >= 0) {
-		std::lock_guard<std::mutex> guard(this->fileAccessMutex);
-		std::ofstream file;
-
-		file.open(this->gpioFilename.c_str(), std::ofstream::out);
-		if (!file.is_open() || !file.good()) {
-			file.close();
-			throw(std::runtime_error(std::string("Failed opening file: ") + this->gpioFilename));
-		}
-		file << "0";
-		file.close();
-	}
 }
 
 void VL53L0X::setAddress(uint8_t newAddress) {
@@ -430,6 +396,8 @@
 	this->writeRegister(0xFF, 0x00);
 }
 
+inline int usleep(useconds_t usec) { HAL_Delay( (usec + 1023) >> 10 ); return 0; };
+
 uint16_t VL53L0X::readRangeContinuousMillimeters() {
 	startTimeout();
 	while ((this->readRegister(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
@@ -485,44 +453,6 @@
 
 /*** Private Methods ***/
 
-void VL53L0X::initGPIO() {
-	if (this->gpioInitialized) {
-		return;
-	}
-
-	// Set XSHUT pin mode (if pin set)
-	if (this->xshutGPIOPin >= 0) {
-		std::string gpioDirectionFilename = std::string("/sys/class/gpio/gpio") + std::to_string(this->xshutGPIOPin) + std::string("/direction");
-		this->gpioFilename = std::string("/sys/class/gpio/gpio") + std::to_string(this->xshutGPIOPin) + std::string("/value");
-
-		std::lock_guard<std::mutex> guard(this->fileAccessMutex);
-
-		// Ensure that the GPIO pin is exported
-		std::ofstream file;
-		file.open("/sys/class/gpio/export", std::ofstream::out);
-		if (!file.is_open() || !file.good()) {
-			file.close();
-			throw(std::runtime_error("Failed opening file: /sys/class/gpio/export"));
-		}
-		file << this->xshutGPIOPin;
-		file.close();
-
-		// Sleep for 100ms - exporting GPIO pin on RPi might take non-zero time, as per issue #7 (https://github.com/mjbogusz/vl53l0x-linux/issues/7)
-		usleep(100000);
-
-		// Set the GPIO direction to output
-		file.open(gpioDirectionFilename.c_str(), std::ofstream::out);
-		if (!file.is_open() || !file.good()) {
-			file.close();
-			throw(std::runtime_error(std::string("Failed opening file: ") + gpioDirectionFilename));
-		}
-		file << "out";
-		file.close();
-	}
-
-	this->gpioInitialized = true;
-}
-
 void VL53L0X::initHardware() {
 	// Enable the sensor
 	this->powerOn();
diff -Naurw ./VL53L0X.hpp ../vl53l0x/VL53L0X.hpp
--- ./VL53L0X.hpp	2020-07-30 14:24:10.708609729 +0200
+++ ../vl53l0x/VL53L0X.hpp	2020-07-30 14:24:41.031039276 +0200
@@ -27,7 +27,7 @@
 		 * since the API user manual says that it is performed by ST on the bare modules;
 		 * It seems like that should work well enough unless a cover glass is added.
 		 */
-		VL53L0X(const int16_t xshutGPIOPin = -1, bool ioMode2v8 = true, const uint8_t address = VL53L0X_ADDRESS_DEFAULT);
+		VL53L0X(bool ioMode2v8 = false, const uint8_t address = VL53L0X_ADDRESS_DEFAULT);
 
 		/*** Public methods ***/
 		/**
@@ -143,15 +143,13 @@
 		 * Whether a timeout occurred in one of the read functions since the last call to timeoutOccurred().
 		 */
 		bool timeoutOccurred();
+		bool initialized = false;
 	private:
 		/*** Private fields ***/
 
 		uint8_t address;
 		int16_t xshutGPIOPin;
 		bool ioMode2v8;
-		std::string gpioFilename;
-		std::mutex fileAccessMutex;
-		bool gpioInitialized;
 
 		uint32_t measurementTimingBudgetMicroseconds;
 		uint64_t timeoutStartMilliseconds;
@@ -163,7 +161,6 @@
 		/*** Private methods ***/
 
 		void initHardware();
-		void initGPIO();
 		/**
 		 * Get reference SPAD (single photon avalanche diode) count and type.
 		 *
